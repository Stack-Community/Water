{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Water","text":"<p>A modular terminal game engine to help developers build games in their terminal.</p> <p>Warning</p> <p>Water is currently in the BETA stage and many features may be deprecated, removed, or changed throughout the course of development.</p>"},{"location":"#install","title":"Install","text":"<p>To install Water, run the following command.</p> Release <pre><code>    pip install Water-GM\n</code></pre> <p>This will install the latest version of Water however, the option to install specific version of water is presented.</p>"},{"location":"#getting-started-with-water","title":"Getting started with Water","text":"<p>View Getting started to build your first water project.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>View API Reference for detailed documentation of the aspects of the API.</p>"},{"location":"api/","title":"API Reference","text":"<p>This holds all API References used the \"Water-GM\" pip library. </p> <p>Warning</p> <p>Some API References are unreliable, broken, or deprecated.</p>"},{"location":"api/#ui-module","title":"(UI) Module","text":"<pre><code>class UI:\n</code></pre> <p>Includes the all UI (User Input) functions to collect input from the user.</p> UI.prompt <p>This is a <code>@staticmethod</code> function</p> <p>Asks the user a prompt defined in the code with the ability to return the users response.</p> <p>Developers have to define {prompt} with a string for example,</p> <pre><code>UI.prompt(\"What's your name?\")\n</code></pre>"},{"location":"api/#uiconditions-module","title":"(UI.Conditions) Module","text":"<p>Includes all Conditional functions and methods to collect conditional input from the user.</p> UI.Conditions.meet <p>This is a <code>@staticmethod</code> function</p> <p>Asks the user a prompt defined in the code with the ability to return the users response as in a True or False.</p> <p>Developers have to define {prompt} with a string for example,</p> <pre><code>UI.Condition.meet(\"What's your name?\")\n</code></pre> <p>Developers could also set a default value to fallback on when user provides no input. For instance,</p> <pre><code>UI.Condition.meet(\"What's your name?\", default_value=True)\n</code></pre>"},{"location":"gettingstarted/","title":"Getting Started","text":"<p>Info</p> <p>This documentation page assumes you've installed Water and made a project.</p>"},{"location":"gettingstarted/#setup","title":"Setup","text":"<p>We will start by importing the package by using this. <pre><code>from Water import Engine\n</code></pre></p> Note <p>Engine module is the main module that powers Water itself.</p> <p>The engine module is split up into submodules with different purposes and features. For this page, we'll focus on the UI submodule.</p> <p>Let's make the UI1 submodule into a variable we can call on. (For your sanity) <pre><code>from Water import Engine\nUI = Engine.UI # User input / interface\n</code></pre></p> <p>We've officially set up the foundations of the Water Engine and the submodule called UI.</p>"},{"location":"gettingstarted/#using-water-engine","title":"Using Water Engine","text":"<p>Using the foundation we've made, we can start using the engine to our needs.</p> <p>Let's make a call to a function in the UI submodule. To do that, we use these lines of code.</p> <pre><code>from Water import Engine\nUI = Engine.UI # User input / interface\nUI.prompt(\"What's your name?\")\n</code></pre> <p>UI.prompt is the fancy version of asking a question to the user.  There's an option to make it save the response by making it into a variable.</p> <p>Tip</p> <p>\"prompt\" function always returns the user input.</p> <pre><code>response = UI.prompt(\"What's your name?\")\n</code></pre> <p>Let's ask the user a Yes or No2 question.  To achieve this, we'll call a different subclass function. <pre><code>from Water import Engine\nUI = Engine.UI # User input / interface\nresponse = UI.prompt(\"What's your name?\")\nmeet_response = UI.Conditions.meet(f\"Ok, {response}. Does apples come from trees?\")\n</code></pre> Conditions are a subclass filled with conditional functions and methods. So, when we call a function called meet, what we're really doing is asking a true or false statement.</p> <p>Note</p> <p>Conditions.meet has a builtin loop to ensure it gets the right response from a dictionary.</p> Hint <p>Conditions.meet also has a configurable default value you can set. You can set the default value by doing this <pre><code>UI.Conditions.meet(f\"Ok, {response}. Does apples come from trees?\", default_value=Yes)\n</code></pre></p> <p>Let's use our \"meet_response\" variable to add a response to the user's choice. We can achieve this by doing this.</p> <pre><code>from Water import Engine\nUI = Engine.UI # User input / interface\nresponse = UI.prompt(\"What's your name?\")\nmeet_response = UI.Conditions.meet(f\"Ok, {response}. Does apples come from trees?\")\nif meet_response:\nprint(\"Correct!\")\nelse:\nprint(\"Interesting...\")\n</code></pre> <p>We now have a short trivia quiz using Water. Congrats!  Everything that powers water is modular so you can use and not use certain modules.</p> <p>The expected output you should get is the following. <pre><code>What's your name?\nJohn (User input)\n\nOk, John. Does apples come from trees? | Y or N (Yes or No)\nY (User input)\nCorrect!\n\nProcess finished with exit code 0\n</code></pre></p> <ol> <li> <p>UI means User input\u00a0\u21a9</p> </li> <li> <p>\"Yes or No\" is basically True or false but worded differently\u00a0\u21a9</p> </li> </ol>"}]}